import{a as i}from"./chunk-ZS3HGKX5.js";var d=Math.PI,s=2*d;function f(t){switch(t){case i.LinearPeriod:return"linPer";case i.LinearFrequency:return"linFreq";case i.QuadraticPeriod:return"quadPer";case i.QuadraticFrequency:return"quadFreq";case i.LogarithmicPeriod:return"logPer";case i.LogarithmicFrequency:return"logFreq";default:throw new Error(`Unknown chirp shape ${t}`)}}function g(t){return new o(t.chirpSweep,t.chirpSweepSamples,t.initialPeriod,t.finalPeriod,t.phaseInPi,t.amplitude,t.minimalValue,t.isBiDirectional,t.noiseRatio)}var o=class{constructor(e=i.LinearPeriod,n=128,r=128,a=16,u=0,l=100,p=10,m=!0,F=0){if(this.directionForward=!0,this.currentSample=0,this.moniker="",n<2)throw new Error(`The number of samples ${n} in chirp sweep should be \u2265 2`);if(r<2)throw new Error(`The initial period ${r} in chirp sweep should be \u2265 2`);if(a<2)throw new Error(`The final period ${a} in chirp sweep should be \u2265 2`);this.sweepSamples=n,this.sweepSamplesMinusOne=n-1,this.sampleAmplitude=l,this.sampleMinimum=p,this.summand=p+l,this.initialPeriod=r,this.instantPeriod=r,this.initialFrequency=s/r,this.instantFrequency=this.initialFrequency,this.finalPeriod=a,this.finalFrequency=s/a,this.chirpSweep=e,this.isBiDirectional=m,this.phaseInPi=u,this.phase=d*u,this.angle=this.phase,this.noiseRatio=F,this.ratio=this.calculateRatio(e);let w=this.sampleAmplitude.toFixed(0),P=this.initialPeriod.toFixed(0),q=this.finalPeriod.toFixed(0),y=f(this.chirpSweep),S=this.sweepSamples.toFixed(0);this.moniker=`${w}\u2219chirp(${y}, ${S}, ${P} \u279C ${q}`;let h=5e-5;if(Math.abs(this.phaseInPi)>h){let c=this.phaseInPi.toFixed(2);this.moniker=`${this.moniker}, ${c}\u2219\u03C0`}if(this.isBiDirectional?this.moniker+=", bidir)":this.moniker+=")",this.sampleMinimum>h){let c=this.sampleMinimum.toFixed(0);this.moniker=`${c} + ${this.moniker}`}this.noiseRatio>h&&(this.moniker=`${this.moniker} + noise(${this.noiseRatio.toFixed(2)})`)}reset(){this.angle=this.phase,this.instantFrequency=this.initialFrequency,this.instantPeriod=this.initialPeriod,this.directionForward=!0,this.currentSample=0}nextSample(){return this.currentSample++,this.currentSample>this.sweepSamples&&(this.currentSample=1,this.isBiDirectional&&(this.directionForward=!this.directionForward)),this.isBiDirectional?this.instantFrequency=this.directionForward?this.nextFrequencyForward():this.nextFrequencyBackward():this.instantFrequency=this.nextFrequencyForward(),this.angle+=this.instantFrequency,this.angle>s?this.angle-=s:this.angle<-s&&(this.angle+=s),this.summand+this.sampleAmplitude*Math.cos(this.angle)}calculateRatio(e){switch(e){case i.LinearPeriod:return(this.finalPeriod-this.initialPeriod)/this.sweepSamplesMinusOne;case i.LinearFrequency:return(this.finalFrequency-this.initialFrequency)/this.sweepSamplesMinusOne;case i.QuadraticPeriod:return(this.finalPeriod-this.initialPeriod)/(this.sweepSamplesMinusOne*this.sweepSamplesMinusOne);case i.QuadraticFrequency:return(this.finalFrequency-this.initialFrequency)/(this.sweepSamplesMinusOne*this.sweepSamplesMinusOne);case i.LogarithmicPeriod:return this.finalPeriod/this.initialPeriod;case i.LogarithmicFrequency:return this.finalFrequency/this.initialFrequency;default:throw new Error(`Unknown chirp sweep ${e}`)}}nextFrequencyForward(){if(this.currentSample===1)return this.instantPeriod=this.initialPeriod,this.instantFrequency=this.initialFrequency,this.initialFrequency;let e;switch(this.chirpSweep){case i.LinearPeriod:return this.instantPeriod+=this.ratio,s/this.instantPeriod;case i.LinearFrequency:return this.instantFrequency+this.ratio;case i.QuadraticPeriod:return e=this.currentSample-1,this.instantPeriod=this.initialPeriod+this.ratio*e*e,s/this.instantPeriod;case i.QuadraticFrequency:return e=this.currentSample-1,this.initialFrequency+this.ratio*e*e;case i.LogarithmicPeriod:return this.instantPeriod=this.initialPeriod*Math.pow(this.ratio,(this.currentSample-1)/this.sweepSamplesMinusOne),s/this.instantPeriod;case i.LogarithmicFrequency:return this.initialFrequency*Math.pow(this.ratio,(this.currentSample-1)/this.sweepSamplesMinusOne)}return this.initialFrequency}nextFrequencyBackward(){if(this.currentSample===1)return this.instantPeriod=this.finalPeriod,this.instantFrequency=this.finalFrequency,this.finalFrequency;let e;switch(this.chirpSweep){case i.LinearPeriod:return this.instantPeriod-=this.ratio,s/this.instantPeriod;case i.LinearFrequency:return this.instantFrequency-this.ratio;case i.QuadraticPeriod:return e=this.sweepSamples-this.currentSample+1,this.instantPeriod=this.initialPeriod+this.ratio*e*e,s/this.instantPeriod;case i.QuadraticFrequency:return e=this.sweepSamples-this.currentSample+1,this.initialFrequency+this.ratio*e*e;case i.LogarithmicPeriod:return this.instantPeriod=this.initialPeriod*Math.pow(this.ratio,(this.sweepSamples-this.currentSample+1)/this.sweepSamplesMinusOne),s/this.instantPeriod;case i.LogarithmicFrequency:return this.initialFrequency*Math.pow(this.ratio,(this.sweepSamples-this.currentSample+1)/this.sweepSamplesMinusOne)}return this.finalFrequency}};export{g as a,o as b};
